{"version":3,"file":"static/js/493.aa28364f.chunk.js","mappings":"4PAQMA,EAAO,WACT,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEOC,GAAMC,EAAAA,EAAAA,MAAND,IAEPE,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAW,mCAAG,oGAEZN,GAAW,GAFC,UAGOO,EAAAA,EAAAA,IAAmBJ,GAH1B,OAGNK,EAHM,OAIZV,GAAS,SAAAW,GAAS,wBAAQA,GAAR,CAAmBD,GAAnB,IAJN,gDAMZN,EAAS,EAAD,IANI,yBASZF,GAAW,GATC,4EAAH,qDAYdG,GACCG,GAEP,GAAE,CAACH,IAEJ,IAAIO,EAAW,GAKf,OAJoB,IAAjBb,EAAMc,SACLD,GAAW,IAIX,4BACI,eAAIE,UAAWC,EAAAA,EAAAA,UAAf,mBACCd,IAAW,SAAC,IAAD,KACZ,eAAIa,UAAWC,EAAAA,EAAAA,cAAf,SACChB,EAAMiB,KAAI,gBAAEC,EAAF,EAAEA,KAAF,OACP,eAAaH,UAAWC,EAAAA,EAAAA,KAAxB,UACI,gBAAKD,UAAWC,EAAAA,EAAAA,SAAhB,UACI,wBACKE,EAAKD,KAAI,gBAAEX,EAAF,EAAEA,GAAIa,EAAN,EAAMA,KAAN,OACV,yBACA,uBAAIA,KADKb,EADC,SAHbA,EADF,MAcVF,IAAS,qDACRS,IAAY,wEAGzB,EACD,YAEAf,EAAKsB,aAAe,CAChBT,KAAM,GACNF,YAAa,WAAQ,EACrBC,mBAAoB,WAAQ,EAC5BW,kBAAmB,WAAQ,E","sources":["pages/Cast.jsx"],"sourcesContent":["import {useState, useEffect} from \"react\";\nimport {useParams} from \"react-router-dom\";\nimport Loader from \"../components/Loader/Loader\";\nimport PropTypes from 'prop-types';\nimport s from \"../components/MoviesCard/MoviesCard.module.css\"\n\nimport { getMoviesByCredits } from \"../shared/api/api\";\n\nconst Cast = () => {\n    const [items, setItems] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const {id} = useParams();\n\n    useEffect(()=> {\n        const fetchMovies = async () =>  {        \n            try {\n                setLoading(true);\n                const data = await getMoviesByCredits(id);\n                setItems(prevItems => [...prevItems, data])\n            } catch (error) {\n                setError(error);\n            }\n            finally {\n                setLoading(false);\n            }\n        } \n        if(id) {\n            fetchMovies()\n        }\n    }, [id]);\n\n    let noResult = \"\";\n    if(items.length === 0) {\n        noResult = true;\n    }\n\n    return (\n        <div>\n            <h3 className={s.castTitle}>Cast:</h3>\n            {loading && <Loader/>}\n            <ul className={s.castContainer}>\n            {items.map(({cast}) => (\n                <li key={id} className={s.cast}>\n                    <div className={s.castList}>\n                        <ul>\n                            {cast.map(({id, name}) => (\n                            <li key={id}>\n                            <p>{name}</p>\n                            </li>\n                            ))}\n                        </ul>\n                    </div>\n                </li>\n                ))}\n            </ul>\n            {error && <p>Failed to upload movies.</p>}\n            {!noResult && <p>Sorry, we didn't find the cast information</p>}\n        </div>  \n    )\n}\nexport default Cast;\n\nCast.defaultProps = {\n    data: [],\n    fetchMovies: () => {},\n    getMoviesByCredits: () => {},\n    formSubmitHandler: () => {},\n    }\n\nCast.propTypes = {\n    id: PropTypes.string,\n    fetchMovies: PropTypes.func,\n    getMoviesByCredits: PropTypes.func,\n    data: PropTypes.arrayOf(PropTypes.shape({\n        cast: PropTypes.arrayOf(PropTypes.shape({\n            id: PropTypes.string,\n            name: PropTypes.string,\n        })),\n        \n    }))\n}"],"names":["Cast","useState","items","setItems","loading","setLoading","error","setError","id","useParams","useEffect","fetchMovies","getMoviesByCredits","data","prevItems","noResult","length","className","s","map","cast","name","defaultProps","formSubmitHandler"],"sourceRoot":""}