{"version":3,"file":"static/js/736.5772f1c3.chunk.js","mappings":"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","sources":["pages/Reviews.jsx","shared/api/api.js","webpack://react-homework-template/./src/components/MoviesCard/MoviesCard.module.css?07cf"],"sourcesContent":["import {useState, useEffect} from \"react\";\nimport {useParams} from \"react-router-dom\";\nimport Loader from \"../components/Loader/Loader\";\nimport PropTypes from 'prop-types';\nimport s from \"../components/MoviesCard/MoviesCard.module.css\"\n    \nimport { getMoviesByReviews } from \"../shared/api/api\";\n    \nconst Reviews = () => {\n    const [items, setItems] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n    \n    const {id} = useParams();\n    \n    useEffect(()=> {\n        const fetchMovies = async () =>  {        \n            try {\n                setLoading(true);\n                const data = await getMoviesByReviews(id);\n                setItems(prevItems => [...prevItems, data])\n            } catch (error) {\n                setError(error);\n            }\n            finally {\n                setLoading(false);\n            }\n        } \n        if(id) {\n            fetchMovies()\n            }\n    }, [id]);\n    \n    let noResult = \"\";\n    if(items.length === 0) {\n        noResult = true;\n    }\n\n    let finalLinkAvatar = '';\n    function getAvatar (author_details) {\n    if(author_details.avatar_path) {\n        const replaceText = '/https://www.gravatar.com/avatar';\n        const addText = 'https://gravatar.com/avatar'\n        const linkAvatar = author_details.avatar_path;\n        finalLinkAvatar = addText.concat(linkAvatar.replace((new RegExp(replaceText, \"g\")), ''));\n        return finalLinkAvatar;\n        } else {\n            return finalLinkAvatar = 'https://gravatar.com/avatar/1kks3YnVkpyQxzw36CObFPvhL5f.jpg'\n        }\n    }\n\n    return (\n        <div>\n            <h3 className={s.castTitle}>Reviews:</h3>\n            {loading && <Loader/>}\n            <ul className={s.castContainer}>\n            {items.map(({results}) => (\n                <li key={id} className={s.cast}>\n                    <div className={s.castList}>\n                        <ul>\n                            {results.map(({id, author, content, author_details}) => (\n                            <li key={id} className={s.reviewsBlock}>\n                                <img src={`${getAvatar(author_details)}`} alt=\"User avatar\" className={s.imgAvatar} />\n                                <h3>{author}</h3>\n                                <p>{content}</p>\n                            </li>\n                            ))}\n                        </ul>\n                    </div>\n                </li>\n                ))}\n            </ul>\n            {error && <p>Failed to upload movies.</p>}\n            {!noResult && <p>Sorry, we didn't find the reviews information</p>}\n        </div>  \n    )\n}\n\nexport default Reviews;\n\nReviews.defaultProps = {\n    data: [],\n    fetchMovies: () => {},\n    getMoviesByReviews: () => {},\n    formSubmitHandler: () => {},\n    }\n\nReviews.propTypes = {\n    id: PropTypes.string,\n    fetchMovies: PropTypes.func,\n    getMoviesByReviews: PropTypes.func,\n    data: PropTypes.arrayOf(PropTypes.shape({\n        results: PropTypes.arrayOf(PropTypes.shape({\n            id: PropTypes.string,\n            author: PropTypes.string,\n            content: PropTypes.string,\n            author_details: PropTypes.arrayOf(PropTypes.shape({\n                avatar_path: PropTypes.string,\n            })),\n        })),\n        \n    }))\n}","import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: 'https://api.themoviedb.org/3/',\n    params: {\n        api_key: 'd2b2f291667f079bc8fdb4687806371b',\n    }\n});\n\nexport const getMovies = async(page = 1) => {\n    const {data} = await instance.get('trending/all/day', {\n        params: {\n            page,\n        }\n    });\n    return data;\n};\n\nexport const getMoviesBySearch = async(page = 1, query) => {\n    const {data} = await instance.get('/search/movie', {\n        params: {\n            page,\n            query,\n        }\n    });\n    return data;\n};\n\nexport const getMoviesById = async(id) => {\n    const {data} = await instance.get(`/movie/${id}`, {\n        params: {\n            language: \"en-US\",\n        }\n    });\n    return data;\n};\n\nexport const getMoviesByCredits = async(id) => {\n    const {data} = await instance.get(`/movie/${id}/credits`, {\n        params: {\n            language: \"en-US\",\n        }\n    });\n    return data;\n};\n\nexport const getMoviesByReviews = async(id) => {\n    const {data} = await instance.get(`/movie/${id}/reviews`, {\n        params: {\n            language: \"en-US\",\n        }\n    });\n    return data;\n};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"MoviesCard_container__onfvk\",\"movieDetail\":\"MoviesCard_movieDetail__nbfJ4\",\"button\":\"MoviesCard_button__+sHr0\",\"loader\":\"MoviesCard_loader__HM+Rk\",\"img\":\"MoviesCard_img__TGBhC\",\"movieDetailList\":\"MoviesCard_movieDetailList__7jWyk\",\"cast\":\"MoviesCard_cast__2qXTi\",\"castContainer\":\"MoviesCard_castContainer__i7iQ8\",\"outlet\":\"MoviesCard_outlet__7VSOJ\",\"castTitle\":\"MoviesCard_castTitle__f1AqC\",\"castList\":\"MoviesCard_castList__92DAq\",\"reviewsBlock\":\"MoviesCard_reviewsBlock__uA+rt\"};"],"names":["Reviews","useState","items","setItems","loading","setLoading","error","setError","id","useParams","useEffect","fetchMovies","getMoviesByReviews","data","prevItems","noResult","length","getAvatar","author_details","avatar_path","linkAvatar","concat","replace","RegExp","className","s","map","results","author","content","src","alt","defaultProps","formSubmitHandler","instance","axios","baseURL","params","api_key","getMovies","page","get","getMoviesBySearch","query","getMoviesById","language","getMoviesByCredits"],"sourceRoot":""}