{"version":3,"file":"static/js/736.85304bb0.chunk.js","mappings":"4PAQMA,EAAU,WACZ,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEOC,GAAMC,EAAAA,EAAAA,MAAND,IAEPE,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAW,mCAAG,oGAEZN,GAAW,GAFC,UAGOO,EAAAA,EAAAA,IAAmBJ,GAH1B,OAGNK,EAHM,OAIZV,GAAS,SAAAW,GAAS,wBAAQA,GAAR,CAAmBD,GAAnB,IAJN,gDAMZN,EAAS,EAAD,IANI,yBASZF,GAAW,GATC,4EAAH,qDAYdG,GACCG,GAEP,GAAE,CAACH,IAEJ,IAAIO,EAAW,GACK,IAAjBb,EAAMc,SACLD,GAAW,GAIf,SAASE,EAAWC,GACpB,GAAGA,EAAeC,YAAa,CAC3B,IAEMC,EAAaF,EAAeC,YAElC,MAHgB,8BAEUE,OAAOD,EAAWE,QAAS,IAAIC,OAHrC,mCAGyD,KAAO,IAEnF,CACG,MAAyB,6DAEhC,CAED,OACI,4BACI,eAAIC,UAAWC,EAAAA,EAAAA,UAAf,sBACCrB,IAAW,SAAC,IAAD,KACZ,eAAIoB,UAAWC,EAAAA,EAAAA,cAAf,SACCvB,EAAMwB,KAAI,gBAAEC,EAAF,EAAEA,QAAF,OACP,eAAaH,UAAWC,EAAAA,EAAAA,KAAxB,UACI,gBAAKD,UAAWC,EAAAA,EAAAA,SAAhB,UACI,wBACKE,EAAQD,KAAI,gBAAElB,EAAF,EAAEA,GAAIoB,EAAN,EAAMA,OAAQC,EAAd,EAAcA,QAASX,EAAvB,EAAuBA,eAAvB,OACb,gBAAaM,UAAWC,EAAAA,EAAAA,aAAxB,WACI,gBAAKK,IAAG,UAAKb,EAAUC,IAAmBa,IAAI,cAAcP,UAAWC,EAAAA,EAAAA,aACvE,wBAAKG,KACL,uBAAIC,MAHCrB,EADI,SAHhBA,EADF,MAgBVF,IAAS,qDACRS,IAAY,2EAGzB,EAED,YAEAf,EAAQgC,aAAe,CACnBnB,KAAM,GACNF,YAAa,WAAQ,EACrBC,mBAAoB,WAAQ,EAC5BqB,kBAAmB,WAAQ,E","sources":["pages/Reviews.jsx"],"sourcesContent":["import {useState, useEffect} from \"react\";\nimport {useParams} from \"react-router-dom\";\nimport Loader from \"../components/Loader/Loader\";\nimport PropTypes from 'prop-types';\nimport s from \"../components/MoviesCard/MoviesCard.module.css\"\n    \nimport { getMoviesByReviews } from \"../shared/api/api\";\n    \nconst Reviews = () => {\n    const [items, setItems] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n    \n    const {id} = useParams();\n    \n    useEffect(()=> {\n        const fetchMovies = async () =>  {        \n            try {\n                setLoading(true);\n                const data = await getMoviesByReviews(id);\n                setItems(prevItems => [...prevItems, data])\n            } catch (error) {\n                setError(error);\n            }\n            finally {\n                setLoading(false);\n            }\n        } \n        if(id) {\n            fetchMovies()\n            }\n    }, [id]);\n    \n    let noResult = \"\";\n    if(items.length === 0) {\n        noResult = true;\n    }\n\n    let finalLinkAvatar = '';\n    function getAvatar (author_details) {\n    if(author_details.avatar_path) {\n        const replaceText = '/https://www.gravatar.com/avatar';\n        const addText = 'https://gravatar.com/avatar'\n        const linkAvatar = author_details.avatar_path;\n        finalLinkAvatar = addText.concat(linkAvatar.replace((new RegExp(replaceText, \"g\")), ''));\n        return finalLinkAvatar;\n        } else {\n            return finalLinkAvatar = 'https://gravatar.com/avatar/1kks3YnVkpyQxzw36CObFPvhL5f.jpg'\n        }\n    }\n\n    return (\n        <div>\n            <h3 className={s.castTitle}>Reviews:</h3>\n            {loading && <Loader/>}\n            <ul className={s.castContainer}>\n            {items.map(({results}) => (\n                <li key={id} className={s.cast}>\n                    <div className={s.castList}>\n                        <ul>\n                            {results.map(({id, author, content, author_details}) => (\n                            <li key={id} className={s.reviewsBlock}>\n                                <img src={`${getAvatar(author_details)}`} alt=\"User avatar\" className={s.imgAvatar} />\n                                <h3>{author}</h3>\n                                <p>{content}</p>\n                            </li>\n                            ))}\n                        </ul>\n                    </div>\n                </li>\n                ))}\n            </ul>\n            {error && <p>Failed to upload movies.</p>}\n            {!noResult && <p>Sorry, we didn't find the reviews information</p>}\n        </div>  \n    )\n}\n\nexport default Reviews;\n\nReviews.defaultProps = {\n    data: [],\n    fetchMovies: () => {},\n    getMoviesByReviews: () => {},\n    formSubmitHandler: () => {},\n    }\n\nReviews.propTypes = {\n    id: PropTypes.string,\n    fetchMovies: PropTypes.func,\n    getMoviesByReviews: PropTypes.func,\n    data: PropTypes.arrayOf(PropTypes.shape({\n        results: PropTypes.arrayOf(PropTypes.shape({\n            id: PropTypes.string,\n            author: PropTypes.string,\n            content: PropTypes.string,\n            author_details: PropTypes.arrayOf(PropTypes.shape({\n                avatar_path: PropTypes.string,\n            })),\n        })),\n        \n    }))\n}"],"names":["Reviews","useState","items","setItems","loading","setLoading","error","setError","id","useParams","useEffect","fetchMovies","getMoviesByReviews","data","prevItems","noResult","length","getAvatar","author_details","avatar_path","linkAvatar","concat","replace","RegExp","className","s","map","results","author","content","src","alt","defaultProps","formSubmitHandler"],"sourceRoot":""}